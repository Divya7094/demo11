using System.Text.Json.Serialization; 
using System.ComponentModel.DataAnnotations;
namespace WisVestAPI.Models.DTOs
{
    public class UserInputDTO
    {
        [Required(ErrorMessage = "Risk tolerance is required.")]
        [RegularExpression("Low|Medium|High", ErrorMessage = "Risk tolerance must be one of: Low, Medium, High.")]
        public string? RiskTolerance { get; set; }    
        [Required(ErrorMessage = "Investment horizon is required.")]
        [Range(1, 30, ErrorMessage = "Investment horizon must be between 1 and 30 years.")]
        [JsonPropertyName("investmentHorizon")]       
        public int InvestmentHorizon { get; set; }  
        [Required(ErrorMessage = "Age is required.")]
        [Range(18, 100, ErrorMessage = "Age must be between 18 and 100.")]     
        public int Age { get; set; }
        [Required(ErrorMessage = "Goal is required.")]
        public string? Goal { get; set; }  
        [Required(ErrorMessage = "Target amount is required.")]
        [Range(10000, 100000000, ErrorMessage = "Target amount must be between 10,000 and 100,000,000.")]                  
        public decimal TargetAmount { get; set; }           
    }
}

using Microsoft.AspNetCore.Mvc;
using WisVestAPI.Models.DTOs;
using WisVestAPI.Services.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Logging;
using WisVestAPI.Constants;

namespace WisVestAPI.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class UserInputController : ControllerBase
    {
        private readonly IUserInputService _userInputService;
        private readonly ILogger<UserInputController> _logger;

        public UserInputController(IUserInputService userInputService, ILogger<UserInputController> logger)
        {
            _userInputService = userInputService;
            _logger = logger;
        }

        /// <summary>
        /// Handles user input and returns allocation results.
        /// </summary>
        // [HttpPost("submit-input")]
        // public async Task<IActionResult> SubmitInput([FromBody] UserInputDTO input)
        // {
        //     if (input == null)
        //     {
        //         _logger.LogWarning("Null input received.");
        //         return BadRequest(ResponseMessages.NullInput);
        //     }

        //     try
        //     {
        //         var result = await _userInputService.HandleUserInput(input);
        //         return Ok(result);
        //     }
        //     catch (ArgumentException ex)
        //     {
        //         _logger.LogWarning(ex, "Invalid input data.");
        //         return BadRequest(ex.Message);
        //     }
        //     catch (Exception ex)
        //     {
        //         _logger.LogError(ex, ResponseMessages.InternalServerError);
        //         return StatusCode(500, new { message = ResponseMessages.InternalServerError, error = ex.Message });
        //     }
        // }

                [HttpPost("submit-input")]
        public async Task<IActionResult> SubmitInput([FromBody] UserInputDTO input)
        {
            if (input == null)
            {
                _logger.LogWarning("Null input received.");
                return BadRequest(new { message = "Input cannot be null." });
            }
        
            // Validate Age
            if (input.Age < 18 || input.Age > 100)
            {
                _logger.LogWarning("Invalid age: {Age}", input.Age);
                return BadRequest(new { message = input.Age < 18 ? "Minimum age is 18." : "Maximum age is 100." });
            }
        
            // Validate Investment Horizon
            if (input.InvestmentHorizon < 1 || input.InvestmentHorizon > 30)
            {
                _logger.LogWarning("Invalid investment horizon: {Horizon}", input.InvestmentHorizon);
                return BadRequest(new { message = input.InvestmentHorizon < 1 ? "Minimum investment horizon is 1 year." : "Maximum investment horizon is 30 years." });
            }
        
            // Validate Risk Tolerance
            var validRiskTolerances = new[] { "Low", "Medium", "High" };
            if (string.IsNullOrEmpty(input.RiskTolerance) || !validRiskTolerances.Contains(input.RiskTolerance))
            {
                _logger.LogWarning("Invalid risk tolerance: {RiskTolerance}", input.RiskTolerance);
                return BadRequest(new { message = "Risk tolerance must be one of: Low, Medium, High." });
            }
        
            // Validate Target Amount
            if (input.TargetAmount < 10000 || input.TargetAmount > 100000000)
            {
                _logger.LogWarning("Invalid target amount: {TargetAmount}", input.TargetAmount);
                return BadRequest(new { message = input.TargetAmount < 10000 ? "Minimum target amount is ₹10,000." : "Maximum target amount is ₹10,00,00,000." });
            }
        
            try
            {
                var result = await _userInputService.HandleUserInput(input);
                return Ok(result);
            }
            catch (ArgumentException ex)
            {
                _logger.LogWarning(ex, "Invalid input data.");
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Internal server error.");
                return StatusCode(500, new { message = "An error occurred while processing your request.", error = ex.Message });
            }
        }
    }
}
